#!/usr/bin/env python
#!/usr/bin/env python
import rospy
import geometry_msgs.msg
import nav_msgs.msg
import sensor_msgs.msg
from math import pow, atan2, sqrt
from tf.transformations import euler_from_quaternion
import math
 
class Catman:
 
    def __init__(self):
        # Creates a node with name 'turtlebot_controller' and make sure it is a
        # unique node (using anonymous=True).
        rospy.init_node('Catman_controller', anonymous=True)
 
        # Publisher which will publish to the topic '/turtle1/cmd_vel'.
        self.velocity_publisher = rospy.Publisher("/Maran/thruster_manager/input", geometry_msgs.msg.Wrench, queue_size=1)
        self.flag=0
        # A subscriber to the topic '/turtle1/pose'. self.update_pose is called
        # when a message of type Pose is received.
        self.pose_subscriber = rospy.Subscriber("/Maran/gps",sensor_msgs.msg.NavSatFix,self.update_pose)
        self.angle_sub=rospy.Subscriber("/Maran/pose_gt",nav_msgs.msg.Odometry,self.update_angle)
        
        self.pose = sensor_msgs.msg.NavSatFix()
        self.rate = rospy.Rate(10)
        self.angle=0
        self.prev_angle_er=0
        self.sum_error=0
        self.Cu=200
        self.Cp=0.6*self.Cu
        self.Ci=2*self.Cp/self.Cu
        self.Cd=2*self.Cp*self.Cu/8
        self.Flag1=0
        self.prev_distance_er=0
        self.distance_er_summ=0
        self.Cu_speed=0.1;
        self.start_latit=43.797763
        self.start_longit=28.598597
        self.Cp_speed=0.6*self.Cu_speed
        self.Ci_speed=2*self.Cp_speed/self.Cu_speed
        self.Cd_speed=self.Cp_speed*self.Cu_speed/8
    def update_angle(self,data):
        rot_q=data.pose.pose.orientation
        (roll,pitch,theta)=euler_from_quaternion([rot_q.x,rot_q.y,rot_q.z,rot_q.w])
        self.angle=theta
    def update_pose(self, data):
        """Callback function which is called when a new message of type Pose is
        received by the subscriber."""
        self.pose = data
        self.pose.longitude = self.start_longit-data.longitude+self.start_longit
        self.pose.latitude =self.start_latit-data.latitude+self.start_latit
        
       
    

    def euclidean_distance(self,y1, x1, y2, x2): #lon1, lat1, lon2, lat2
	    """Vincenty Inverse Solution of Geodesics on the Ellipsoid (c)
	       Adapted from Chris Veness Javascript implementation:
		    http://www.movable-type.co.uk/scripts/latlong-vincenty.html
		             
	       Originally from: Vincenty inverse formula - T Vincenty, "Direct and Inverse Solutions of Geodesics on the 
		    Ellipsoid with application of nested equations", Survey Review, vol XXII no 176, 1975   
		    http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf                                             
	    """
            
	    #WGS-84 ellipsoid params
	    a = 6378137.0
	    b = 6356752.314245
	    f = 1/298.257223563 

	    L = math.radians(y2-y1)
	    U1 = math.atan((1-f) * math.tan(math.radians(x1)))
	    U2 = math.atan((1-f) * math.tan(math.radians(x2)))
	    sinU1 = math.sin(U1)
	    cosU1 = math.cos(U1)
	    sinU2 = math.sin(U2)
	    cosU2 = math.cos(U2)
	    cosSqAlpha = sinSigma = cosSigma = cos2SigmaM = sigma = 0.0
	    lmbd = L
	    lambdaP = iterLimit = 100.0

	    while abs(lmbd-lambdaP) > 1e-12 and iterLimit > 0:
		iterLimit -= 1
		sinLambda = math.sin(lmbd)
		cosLambda = math.cos(lmbd);
		sinSigma = (sqrt((cosU2*sinLambda) * (cosU2*sinLambda) + 
		    (cosU1*sinU2-sinU1*cosU2*cosLambda) * (cosU1*sinU2-sinU1*cosU2*cosLambda)))

		if sinSigma==0: 
		    return 0   #co-incident points
		cosSigma = sinU1*sinU2 + cosU1*cosU2*cosLambda
		sigma = atan2(sinSigma, cosSigma)
		sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma
		cosSqAlpha = 1 - sinAlpha*sinAlpha
		cos2SigmaM = cosSigma - 2*sinU1*sinU2/cosSqAlpha
		try: #fail equatorial on python <2.6
		    if isnan(cos2SigmaM):
		        cos2SigmaM = 0 # equatorial line: cosSqAlpha=0 (6)
		except: 
		    pass
		C = f/16*cosSqAlpha*(4+f*(4-3*cosSqAlpha))
		lambdaP = lmbd
		lmbd = (L + (1-C) * f * sinAlpha *
		    (sigma + C*sinSigma*(cos2SigmaM+C*cosSigma*(-1+2*cos2SigmaM*cos2SigmaM))))

	    if iterLimit==0:
		return -1 #formula failed to converge

	    uSq = cosSqAlpha * (a*a - b*b) / (b*b)
	    A = 1 + uSq/16384*(4096+uSq*(-768+uSq*(320-175*uSq)))
	    B = uSq/1024 * (256+uSq*(-128+uSq*(74-47*uSq)))
	    deltaSigma = B*sinSigma*(cos2SigmaM+B/4*(cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)-
		    B/6*cos2SigmaM*(-3+4*sinSigma*sinSigma)*(-3+4*cos2SigmaM*cos2SigmaM)))
	    s = b*A*(sigma-deltaSigma)
            print s
	    return s
 
    def linear_vel(self, goal_pose, constant=100):
        
        self.Et=self.euclidean_distance(goal_pose.longitude,goal_pose.latitude, self.pose.longitude, self.pose.latitude)
        self.Pt_speed=self.Cp_speed*self.Et
        self.It_speed=self.distance_er_summ+self.Ci_speed*self.Et
        self.Dt_speed=self.Cd_speed*self.prev_distance_er
        self.prev_distance_er=self.Et
        self.distance_er_summ=self.It_speed
        print self.Pt_speed, self.It_speed, self.Dt_speed
        return self.Pt_speed+self.It_speed+self.Dt_speed
 
    def steering_angle(self, goal_pose):
        
        
  
        p=atan2(goal_pose.latitude - self.pose.latitude, goal_pose.longitude - self.pose.longitude)
        print p
        return p
 
    def angular_vel(self, goal_pose, constant=10):
        a1=self.steering_angle(goal_pose)
        a2=self.angle
        self.et=abs(a1)-abs(a2)
        print self.et, a1, a2 
        self.Pt=self.Cp*self.et
        self.It=self.sum_error+self.Ci*self.et
        self.Dt=self.Cd*self.prev_angle_er
        self.sum_error=self.It
        self.prev_angle_er=self.et
        print self.Pt, self.It, self.Dt
        return int(self.Pt+self.It+self.Dt)
        
 
    def move2goal(self):
        goal_pose = sensor_msgs.msg.NavSatFix()
        # Get the input from the user.
        #goal_pose.latitude = input("Set your x goal: ")
        #goal_pose.longitude = input("Set your y goal: ")
        distance_tolerance = 4
        goal_pose.longitude =28.599989
        goal_pose.latitude=43.798647
 
        vel_msg = geometry_msgs.msg.Wrench()
 
        while self.euclidean_distance(goal_pose.longitude,goal_pose.latitude, self.pose.longitude, self.pose.latitude) >= distance_tolerance:
 
            # Porportional controller.
            # https://en.wikipedia.org/wiki/Proportional_control
 
            # Linear velocity in the x-axis.
            if self.euclidean_distance(goal_pose.longitude,goal_pose.latitude, self.pose.longitude, self.pose.latitude)>10:
                vel_msg.force.x=1000;
            else:
                vel_msg.force.x = self.linear_vel(goal_pose)
            vel_msg.force.y = 0
            vel_msg.force.z = 0
 
            # Angular velocity in the z-axis.
            vel_msg.torque.x = 0
            vel_msg.torque.y = 0
          
            vel_msg.torque.z = self.angular_vel(goal_pose)
            # Publishing our vel_msg
            self.velocity_publisher.publish(vel_msg)
 
            # Publish at the desired rate.
            self.rate.sleep()
 
        # Stopping our robot after the movement is over.
        
        self.velocity_publisher.publish(vel_msg)
        print "I WANT STOP"
        while i<1000:
            print "HELP ME"
        #try to go at start
        
        # If we press control + C, the node will stop.
        rospy.spin()
 
if __name__ == '__main__':
    try:
        x = Catman()
        x.move2goal()
    except rospy.ROSInterruptException:
        pass
